IPDL {
  program = (comment | spaceoreol | import_stm | declaration | rule | annotation)+


  import_stm = "include" blank string blank ";"

  comment = comment_inline | comment_block
  comment_inline = spaces comment_inline_signal comment_line eol
  comment_inline_signal = ("//" | "#")

  comment_line = (~eol any)+
  comment_block = comment_open comment_content comment_close
  comment_open = "/*"
  comment_close = "*/"
  comment_content = (~comment_close any)+
  
  declaration = declaration_type blank (block_declaration | declaration_name)  blank ";"
  declaration_type = word
  declaration_name = word

  block_declaration = block_name blank extend_list?  "{" blank block_content? blank "}"
  extend_list = "extends" blank block_extends blank
  block_extends = word

  rule = rule_type blank rule_name blank "()" blank "{" blank rule_content blank "}"
  rule_type = "Rule" | "Chain"
  rule_name = word
  rule_content = annotation* blank chain_causal*

  chain_causal = operation_causal | chain_item
  operation_causal = chain_causal chain_item_causal_next+
  chain_item_causal_next = blank causal_operator blank chain_item

  chain_item = chain_operation | situation_base_not | situation_base

  chain_operation = chain_item chain_operation_operand+

  chain_operation_operand = blank chain_operator blank (situation_base_not | situation_base)
  situation_base = (rule_call | block | logic_block | wildcard) blank annotation*
  situation_base_not = not (rule_call | block | logic_block)

  chain_operator = or | and

  logic_block = "(" blank rule_content blank ")"
  
  causal_operator = "<--"
  or = "||"
  and = "&&"
  not = "!"
 
  block =  block_name blank "{" blank block_content? blank "}"
  block_name = word

 

  block_content = property block_content_sub*
  block_content_sub = blank "," blank property

  property = property_name blank ":" blank property_value 
  property_name = word
  property_value = mathematical_expression | range | string | number | variable | property_object | property_list
  property_list = blank "[" blank list_item property_list_following_items* blank "]" blank
  // not ideal but prevent a bug in parsing
  property_list_following_items = blank "," blank list_item
  
  range = "[" range_equals_min? blank range_from?  blank "..." blank range_to? blank range_equals_max? "]"
  range_from = (string | number | variable)
  range_to = (string | number | variable)
  range_equals_min = "="
  range_equals_max = "="


  list_item = string | number | variable | property_object

  variable =  type? variable_name
  variable_name =  word sub_variable*
  sub_variable = "." word
  property_object = "{" blank block_content blank "}"
  
 
 
  annotation = "::" block blank
 
  wildcard = "*"
  
  mathematical_expression = mathematical_expression_unary_operation | mathematical_expression_operation | mathematical_expression_block

  mathematical_expression_unary_operation = blank mathematical_expression_unary_operator blank mathematical_expression_operand

  mathematical_expression_unary_operator = mathematical_expression_operator_not

  mathematical_expression_operator_not = "!"

  mathematical_expression_operation = blank mathematical_expression_operand blank mathematical_expression_operator blank mathematical_expression_operand blank
  mathematical_expression_operand = number | variable | mathematical_expression_block | range | string
  mathematical_expression_block = "(" mathematical_expression ")"

  mathematical_expression_operator = mathematical_expression_operator_add | mathematical_expression_operator_substract | mathematical_expression_operator_divide | mathematical_expression_operator_multiply |  mathematical_expression_operator_exponent | mathematical_expression_operator_percentOf |
  mathematical_expression_operator_or |
  mathematical_expression_operator_and

  mathematical_expression_operator_add = "+"
  mathematical_expression_operator_substract = "-"
  mathematical_expression_operator_divide = "/"
  mathematical_expression_operator_multiply = "*"
  mathematical_expression_operator_exponent = "^"
  mathematical_expression_operator_percentOf ="%of"
  mathematical_expression_operator_and ="&&"
  mathematical_expression_operator_or = "||"
  
  
  type = "<" dimension_name "." type_name ">"
  dimension_name = word_no_dot
  type_name = word_no_dot



  rule_call = rule_name blank "(" blank ")"
  
  string = "\"" string_content "\""
  string_content = (~"\"" any)*
   
  number =  blank (mathematical_expression | real_number)
  real_number = type? blank number_value
  number_value =  number_traditional_notation | number_dot_notation
  
  
  number_traditional_notation = number_beforedot number_afterdot?
  number_dot_notation = number_afterdot
  number_beforedot = digit+
  number_afterdot = "." digit+ 
    
  word = letter (alnum | "_" | ".")*
  word_no_dot = letter (alnum | "_")*
  
  blank = spaceoreol* 
  spaceoreol = (space | "\n" | "\r" | comment)
  eol = ~" " (space | end)  
 
}