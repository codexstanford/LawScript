LawScript {
  program = program_content+
  
  program_content = blank (section|  rule | annotation | statement) blank
  
  section_content = blank (section|  rule | annotation | statement) blank
  
  
  statement = (import_stm | declaration| alias | assignation |  enum | instruction) blank ";"
  
  import_stm = "include" blank string

  alias = alias_name blank "is" blank property_value
  assignation = declaration_name blank "=" blank property_value

  declaration = declaration_name blank ":" blank property_value blank decorator*
  
  // @ is legacy
  decorator = blank "@"? decorator_name blank "=" blank decorator_value
  
  decorator_name = word_or_num
  decorator_value = number | string

  // "Dictionary" is legacy
  enum = ("dictionary" | "Dictionary") blank enum_name blank "{" blank enumerals blank "}"

  comment = comment_inline | comment_block
  comment_inline = spaces comment_inline_signal comment_line eol
  comment_inline_signal = ("//" | "#" )

  comment_line = (~eol any)+
  comment_block = comment_open comment_content comment_close
  comment_open = "/*"
  comment_close = "*/"
  comment_content = (~comment_close any)+

  enum_name = word_no_dot
  enumerals = enumeral enumeral_sub*
  enumeral = enumeral_name blank ":" blank enumeral_properties
  enumeral_properties = property_object
  enumeral_sub = blank ("," | newLine) blank enumeral
  enumeral_name = word_no_dot


  alias_name = word

  
  declaration_name = word

  // @ is legacy
  section = ("section" | "@") blank section_name blank "{" blank section_content* blank "}"
  section_name = word

 
  // "()" is legacy
  rule = rule_type blank rule_name blank "()"? blank "{" blank statement blank "}"
  // Rule is legacy
  rule_type = "Rule" | "rule" | "macro"
  rule_name = word
  rule_content = (import_stm | annotation)* blank statement*

  instruction = (annotation)* blank instruction_content*

  instruction_content = instruction_operation | chain_item
  instruction_operation = instruction_content (instruction_operation_next)+
  instruction_operation_next =  blank instruction_operator blank chain_item
  instruction_operator =  or | and | time_operator | causal_operator

   chain_item = (instruction_operation | situation_base_not | situation_base) (blank annotation)*

  situation_base = (section | rule_call | block | logic_block | variable) blank annotation*
  situation_base_not = not (rule_call | block | logic_block | variable)

  logic_block = "(" blank instruction  blank ")"
  
  causal_operator = "-->" | "cause"
  time_operator = "==>" | "before"
  or = "||" | "or"
  and = "&&" | "and"
  not = "!" | "not"
 
  block =  block_name blank "{" blank block_content? blank "}"
  block_name = word

 

  block_content = property block_content_sub*
  block_content_sub = blank ("," | newLine) blank property

  property = property_name blank ":" blank property_value blank decorator*
  property_name = word
  property_value = block | mathematical_expression | property_object | property_list
  property_list = blank "[" blank list_item property_list_following_items* blank "]" blank
  // not ideal but prevent a bug in parsing
  property_list_following_items = blank "," blank list_item
  
  range = "[" range_equals_min? blank range_from?  blank "..." blank range_to? blank range_equals_max? "]"
  range_from = (string | number | variable | mathematical_expression)
  range_to = (string | number | variable | mathematical_expression)
  range_equals_min = "="
  range_equals_max = "="


  list_item = string | number | variable | property_object

  variable =  variable_name
  variable_name =  word sub_variable*
  sub_variable = "." word
  property_object = "{" blank block_content? blank "}"
  
 
 
  annotation = blank ("annotation" | "::") annotation_negation? blank block blank
  annotation_negation = "!"

  mathematical_expression = mathematical_expression_block | mathematical_expression_unary_operation | mathematical_expression_operation | number | variable | range | string

  mathematical_expression_unary_operation = blank mathematical_expression_unary_operator blank mathematical_expression

  mathematical_expression_unary_operator = mathematical_expression_operator_not

  mathematical_expression_operator_not = "!"

  mathematical_expression_operation = blank mathematical_expression blank mathematical_expression_operator blank mathematical_expression blank
  mathematical_expression_block = "(" mathematical_expression ")"

  mathematical_expression_operator = mathematical_expression_operator_add | mathematical_expression_operator_substract | mathematical_expression_operator_divide | mathematical_expression_operator_multiply |  mathematical_expression_operator_exponent | mathematical_expression_operator_percentOf | mathematical_expression_operator_or |  mathematical_expression_operator_and

  mathematical_expression_operator_add = "+"
  mathematical_expression_operator_substract = "-"
  mathematical_expression_operator_divide = "/"
  mathematical_expression_operator_multiply = "*"
  mathematical_expression_operator_exponent = "^"
  mathematical_expression_operator_percentOf = "%of"
  mathematical_expression_operator_and ="&&" | "and"
  mathematical_expression_operator_or = "||" | "or"
  
  



  rule_call = rule_call_reference | rule_call_traditional

  rule_call_traditional = rule_name blank "(" blank ")"
  rule_call_reference = ("ยง"|"$") rule_name

  string = "\"" string_content "\""
  string_content = (~"\"" any)*
   
  number = real_number
  real_number = blank number_value
  number_value = number_traditional_notation | number_dot_notation
  

  
  number_traditional_notation = number_beforedot number_afterdot?
  number_dot_notation = number_afterdot
  number_beforedot = digit+
  number_afterdot = "." digit+ 
    
  word = letter (alnum | "_" | ".")*
  word_or_num = (alnum | "_" | "." | "-")*
  word_no_dot = letter (alnum | "_")*
  
  blank = spaceoreol*
  spaceoreol = (space | "\n" | "\r" | comment)
  eol = ~" " (space | end)

  newLine = blank ("\r\n" | "\n")
 
}